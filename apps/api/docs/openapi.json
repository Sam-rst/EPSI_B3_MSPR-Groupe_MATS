{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Hello World",
        "operationId": "hello_world__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/continents": {
      "get": {
        "tags": [
          "Continents"
        ],
        "summary": "Récupérer tous les continents",
        "description": "Récupère tous les continents disponibles.\n\nReturns:\n    JSONResponse: Une réponse contenant la liste des continents et leur nombre.",
        "operationId": "endpoint_usecase_get_all_continents_continents_get",
        "responses": {
          "200": {
            "description": "Requête réussie",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Ressource créée avec succès"
          },
          "400": {
            "description": "Requête invalide"
          },
          "404": {
            "description": "Ressource non trouvée"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Continents"
        ],
        "summary": "Créer un nouveau continent",
        "description": "Crée un nouveau continent.\n\nArgs:\n    <body> payload: CreateContinentPayload --> Les données nécessaires pour créer un continent.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation et l'ID du continent créé.",
        "operationId": "endpoint_usecase_add_continent_continents_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContinentPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Requête réussie",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Ressource créée avec succès"
          },
          "400": {
            "description": "Requête invalide"
          },
          "404": {
            "description": "Ressource non trouvée"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/continents/{id}": {
      "get": {
        "tags": [
          "Continents"
        ],
        "summary": "Récupérer un continent par ID",
        "description": "Récupère les détails d'un continent spécifique.\n\nArgs:\n    <header> id (int): L'ID du continent à récupérer.\n\nReturns:\n    JSONResponse: Une réponse contenant les détails du continent.",
        "operationId": "endpoint_usecase_get_continent_by_id_continents__id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requête réussie",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Ressource créée avec succès"
          },
          "400": {
            "description": "Requête invalide"
          },
          "404": {
            "description": "Ressource non trouvée"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      },
      "patch": {
        "tags": [
          "Continents"
        ],
        "summary": "Mettre à jour un continent",
        "description": "Met à jour les informations d'un continent existant.\n\nArgs:\n    <header> id (int): L'ID du continent à mettre à jour.\n    <body> payload (UpdateContinentPayload): Les nouvelles données pour le continent.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_patch_continent_by_id_continents__id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContinentPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requête réussie",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Ressource créée avec succès"
          },
          "400": {
            "description": "Requête invalide"
          },
          "404": {
            "description": "Ressource non trouvée"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      },
      "delete": {
        "tags": [
          "Continents"
        ],
        "summary": "Supprimer un continent",
        "description": "Supprime un continent existant.\n\nArgs:\n    <header> id (int): L'ID du continent à supprimer.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_delete_continent_by_id_continents__id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requête réussie",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Ressource créée avec succès"
          },
          "400": {
            "description": "Requête invalide"
          },
          "404": {
            "description": "Ressource non trouvée"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
    },
    "/continents/import": {
      "post": {
        "tags": [
          "Continents"
        ],
        "summary": "Importer plusieurs continents",
        "description": "Importe plusieurs continents à la fois.\n\nArgs:\n    <body> payload (list[CreateContinentPayload]): La liste des continents à importer.\n\nReturns:\n    JSONResponse: Une réponse contenant le résultat de l'importation.",
        "operationId": "endpoint_usecase_import_continents_continents_import_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CreateContinentPayload"
                },
                "type": "array",
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Requête réussie",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Ressource créée avec succès"
          },
          "400": {
            "description": "Requête invalide"
          },
          "404": {
            "description": "Ressource non trouvée"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/countries": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Endpoint Usecase Get All Countries",
        "description": "Récupère tous les pays disponibles.\n\nReturns:\n    JSONResponse: Une réponse contenant la liste des pays et leur nombre.",
        "operationId": "endpoint_usecase_get_all_countries_countries_get",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Countries"
        ],
        "summary": "Endpoint Usecase Add Country",
        "description": "Crée un nouveau pays.\n\nArgs:\n    <body> payload (CreateCountryPayload): Les données nécessaires pour créer un pays.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation et l'ID du pays créé.",
        "operationId": "endpoint_usecase_add_country_countries_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCountryPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/countries/{id}": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Endpoint Usecase Get Country By Id",
        "description": "Récupère les détails d'un pays spécifique.\n\nArgs:\n    <header> id (int): L'ID du pays à récupérer.\n\nReturns:\n    JSONResponse: Une réponse contenant les détails du pays.",
        "operationId": "endpoint_usecase_get_country_by_id_countries__id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Countries"
        ],
        "summary": "Endpoint Usecase Patch Country By Id",
        "description": "Met à jour les informations d'un pays existant.\n\nArgs:\n    <header> id (int): L'ID du pays à mettre à jour.\n    <body> payload (UpdateCountryPayload): Les nouvelles données pour le pays.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_patch_country_by_id_countries__id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCountryPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Countries"
        ],
        "summary": "Endpoint Usecase Delete Country By Id",
        "description": "Supprime un pays existant.\n\nArgs:\n    <header> id (int): L'ID du pays à supprimer.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_delete_country_by_id_countries__id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/countries/import": {
      "post": {
        "tags": [
          "Countries"
        ],
        "summary": "Importer plusieurs pays",
        "description": "Importe plusieurs pays à la fois.\n\nArgs:\n    <body> payload (list[CreateCountryPayload]): La liste des pays à importer.\n\nReturns:\n    JSONResponse: Une réponse contenant le résultat de l'importation.",
        "operationId": "endpoint_usecase_import_continents_countries_import_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CreateCountryPayload"
                },
                "type": "array",
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/vaccines": {
      "get": {
        "tags": [
          "Vaccines"
        ],
        "summary": "Endpoint Usecase Get All Vaccines",
        "description": "Récupère tous les vaccins disponibles.\n\nReturns:\n    JSONResponse: Une réponse contenant la liste des vaccins et leur nombre.",
        "operationId": "endpoint_usecase_get_all_vaccines_vaccines_get",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Vaccines"
        ],
        "summary": "Endpoint Usecase Add Vaccine",
        "description": "Crée un nouveau vaccin.\n\nArgs:\n    <body> payload (CreateVaccinePayload): Les données nécessaires pour créer un vaccin.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation et l'ID du vaccin créé.",
        "operationId": "endpoint_usecase_add_vaccine_vaccines_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVaccinePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/vaccines/{id}": {
      "get": {
        "tags": [
          "Vaccines"
        ],
        "summary": "Endpoint Usecase Get Vaccine By Id",
        "description": "Récupère les détails d'un vaccin spécifique.\n\nArgs:\n    <header> id (int): L'ID du vaccin à récupérer.\n\nReturns:\n    JSONResponse: Une réponse contenant les détails du vaccin.",
        "operationId": "endpoint_usecase_get_vaccine_by_id_vaccines__id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Vaccines"
        ],
        "summary": "Endpoint Usecase Patch Vaccine By Id",
        "description": "Met à jour les informations d'un vaccin existant.\n\nArgs:\n    <header> id (int): L'ID du vaccin à mettre à jour.\n    <body> payload (UpdateVaccinePayload): Les nouvelles données pour le vaccin.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_patch_vaccine_by_id_vaccines__id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVaccinePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Vaccines"
        ],
        "summary": "Endpoint Usecase Delete Vaccine By Id",
        "description": "Supprime un vaccin existant.\n\nArgs:\n    <header> id (int): L'ID du vaccin à supprimer.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_delete_vaccine_by_id_vaccines__id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/vaccines/import": {
      "post": {
        "tags": [
          "Vaccines"
        ],
        "summary": "Importer plusieurs vaccins",
        "description": "Importe plusieurs vaccines à la fois.\n\nArgs:\n    <body> payload (list[CreateVaccinePayload]): La liste des vaccines à importer.\n\nReturns:\n    JSONResponse: Une réponse contenant le résultat de l'importation.",
        "operationId": "endpoint_usecase_import_continents_vaccines_import_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CreateVaccinePayload"
                },
                "type": "array",
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/epidemics": {
      "get": {
        "tags": [
          "Epidemics"
        ],
        "summary": "Endpoint Usecase Get All Epidemics",
        "description": "Récupère toutes les épidémies disponibles.\n\nReturns:\n    JSONResponse: Une réponse contenant la liste des épidémies et leur nombre.",
        "operationId": "endpoint_usecase_get_all_epidemics_epidemics_get",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Epidemics"
        ],
        "summary": "Endpoint Usecase Add Epidemic",
        "description": "Crée une nouvelle épidémie.\n\nArgs:\n    <body> payload (CreateEpidemicPayload): Les données nécessaires pour créer une épidémie.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation et l'ID de l'épidémie créée.",
        "operationId": "endpoint_usecase_add_epidemic_epidemics_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEpidemicPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/epidemics/{id}": {
      "get": {
        "tags": [
          "Epidemics"
        ],
        "summary": "Endpoint Usecase Get Epidemic By Id",
        "description": "Récupère les détails d'une épidémie spécifique.\n\nArgs:\n    <header> id (int): L'ID de l'épidémie à récupérer.\n\nReturns:\n    JSONResponse: Une réponse contenant les détails de l'épidémie.",
        "operationId": "endpoint_usecase_get_epidemic_by_id_epidemics__id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Epidemics"
        ],
        "summary": "Endpoint Usecase Patch Epidemic By Id",
        "description": "Met à jour les informations d'une épidémie existante.\n\nArgs:\n    <header> id (int): L'ID de l'épidémie à mettre à jour.\n    <body> payload (UpdateEpidemicPayload): Les nouvelles données pour l'épidémie.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_patch_epidemic_by_id_epidemics__id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEpidemicPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Epidemics"
        ],
        "summary": "Endpoint Usecase Delete Epidemic By Id",
        "description": "Supprime une épidémie existante.\n\nArgs:\n    <header> id (int): L'ID de l'épidémie à supprimer.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_delete_epidemic_by_id_epidemics__id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/epidemics/import": {
      "post": {
        "tags": [
          "Epidemics"
        ],
        "summary": "Importer plusieurs epidemics",
        "description": "Importe plusieurs epidemics à la fois.\n\nArgs:\n    <body> payload (list[CreateEpidemicPayload]): La liste des epidemics à importer.\n\nReturns:\n    JSONResponse: Une réponse contenant le résultat de l'importation.",
        "operationId": "endpoint_usecase_import_continents_epidemics_import_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CreateEpidemicPayload"
                },
                "type": "array",
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Endpoint Usecase Get All Users",
        "description": "Récupère les détails des utilisateurs spécifiques.\n\nArgs:\n\nReturns:\n    JSONResponse: Une réponse contenant les détails des utilisateurs.",
        "operationId": "endpoint_usecase_get_all_users_users_get",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/users/id/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Endpoint Usecase Get User By Id",
        "description": "Récupère les détails d'un utilisateur spécifique.\n\nArgs:\n    <header> id (int): L'ID de l'utilisateur à récupérer.\n\nReturns:\n    JSONResponse: Une réponse contenant les détails de l'utilisateur.",
        "operationId": "endpoint_usecase_get_user_by_id_users_id__id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/username/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Endpoint Usecase Get User By Username",
        "description": "Récupère les détails d'un utilisateur spécifique.\n\nArgs:\n    <header> username (int): Le username de l'utilisateur à récupérer.\n\nReturns:\n    JSONResponse: Une réponse contenant les détails de l'utilisateur.",
        "operationId": "endpoint_usecase_get_user_by_username_users_username__username__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Endpoint Usecase Delete User By Id",
        "description": "Supprime un utilisateur existant.\n\nArgs:\n    <header> id (int): L'ID de l'utilisateur à supprimer.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_delete_user_by_id_users__id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Récupérer tous les rôles",
        "description": "Récupère tous les roles disponibles.\n\nReturns:\n    JSONResponse: Une réponse contenant la liste des roles et leur nombre.",
        "operationId": "endpoint_usecase_get_all_roles_roles_get",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Créer un nouveau role",
        "description": "Crée un nouveau role.\n\nArgs:\n    <body> payload: CreateRolePayload --> Les données nécessaires pour créer un role.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation et l'ID du role créé.",
        "operationId": "endpoint_usecase_add_role_roles_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRolePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Récupérer un role par son ID",
        "description": "Récupère les détails d'un role spécifique.\n\nArgs:\n    <header> id (int): L'ID du role à récupérer.\n\nReturns:\n    JSONResponse: Une réponse contenant les détails du role.",
        "operationId": "endpoint_usecase_get_role_by_id_roles__id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Roles"
        ],
        "summary": "Mettre à jour un role",
        "description": "Met à jour les informations d'un role existant.\n\nArgs:\n    <header> id (int): L'ID du role à mettre à jour.\n    <body> payload (UpdateRolePayload): Les nouvelles données pour le role.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_patch_role_by_id_roles__id__patch",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRolePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Supprimer un role",
        "description": "Supprime un role existant.\n\nArgs:\n    <header> id (int): L'ID du role à supprimer.\n\nReturns:\n    JSONResponse: Une réponse contenant un message de confirmation.",
        "operationId": "endpoint_usecase_delete_role_by_id_roles__id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/roles/import": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Importer plusieurs roles",
        "description": "Importe plusieurs roles à la fois.\n\nArgs:\n    <body> payload (list[CreateRolePayload]): La liste des roles à importer.\n\nReturns:\n    JSONResponse: Une réponse contenant le résultat de l'importation.",
        "operationId": "endpoint_usecase_import_roles_roles_import_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CreateRolePayload"
                },
                "type": "array",
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register User",
        "operationId": "register_user_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login User",
        "operationId": "login_user_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/verify-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Verify Token",
        "operationId": "verify_token_auth_verify_token_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Forgot Password",
        "operationId": "forgot_password_auth_forgot_password_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset Password",
        "operationId": "reset_password_auth_reset_password_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          },
          {
            "name": "new_password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "New Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/machine-learning/ask": {
      "post": {
        "tags": [
          "Machine Learning"
        ],
        "summary": "Endpoint Ask Prediction To Machine Learning",
        "description": "Demande une prédiction au modèle de machine learning.\n\nReturns:\n    JSONResponse: TODO : Décrire la réponse",
        "operationId": "endpoint_ask_prediction_to_machine_learning_machine_learning_ask_post",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/machine-learning/export": {
      "post": {
        "tags": [
          "Machine Learning"
        ],
        "summary": "Endpoint Export Data For Machine Learning",
        "description": "Export de donnée pour le modèle de machine learning.\n\nReturns:\n    StreamingResponse: Fichier CSV contenant les données exportées",
        "operationId": "endpoint_export_data_for_machine_learning_machine_learning_export_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Column": {
        "properties": {
          "column": {
            "type": "string",
            "title": "Column"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "model": {
            "type": "string",
            "title": "Model"
          }
        },
        "type": "object",
        "required": [
          "column",
          "label",
          "model"
        ],
        "title": "Column"
      },
      "CreateContinentPayload": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "population": {
            "type": "integer",
            "title": "Population"
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "population"
        ],
        "title": "CreateContinentPayload"
      },
      "CreateCountryPayload": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "iso2": {
            "type": "string",
            "title": "Iso2"
          },
          "iso3": {
            "type": "string",
            "title": "Iso3"
          },
          "population": {
            "type": "integer",
            "title": "Population"
          },
          "continent_id": {
            "type": "integer",
            "title": "Continent Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "iso2",
          "iso3",
          "population",
          "continent_id"
        ],
        "title": "CreateCountryPayload"
      },
      "CreateEpidemicPayload": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "title": "Start Date"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "title": "End Date"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "pathogen_name": {
            "type": "string",
            "title": "Pathogen Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "transmission_mode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transmission Mode"
          },
          "symptoms": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Symptoms"
          },
          "reproduction_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reproduction Rate"
          }
        },
        "type": "object",
        "required": [
          "name",
          "start_date",
          "end_date",
          "type",
          "pathogen_name",
          "description",
          "transmission_mode",
          "symptoms",
          "reproduction_rate"
        ],
        "title": "CreateEpidemicPayload"
      },
      "CreateRolePayload": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateRolePayload"
      },
      "CreateVaccinePayload": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "laboratory": {
            "type": "string",
            "title": "Laboratory"
          },
          "technology": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Technology"
          },
          "dose": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dose"
          },
          "efficacy": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Efficacy"
          },
          "storage_temperature": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Temperature"
          },
          "epidemic_id": {
            "type": "integer",
            "title": "Epidemic Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "laboratory",
          "epidemic_id"
        ],
        "title": "CreateVaccinePayload"
      },
      "FilterItem": {
        "properties": {
          "column": {
            "type": "string",
            "title": "Column"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "operator": {
            "$ref": "#/components/schemas/Operator"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "items": {},
                "type": "array"
              }
            ],
            "title": "Value"
          },
          "model": {
            "type": "string",
            "title": "Model"
          }
        },
        "type": "object",
        "required": [
          "column",
          "operator",
          "value",
          "model"
        ],
        "title": "FilterItem"
      },
      "FilterRequest": {
        "properties": {
          "filters": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FilterItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters",
            "default": [
              {
                "column": "",
                "label": "",
                "operator": "=",
                "value": "",
                "model": ""
              }
            ]
          },
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SortOption"
              },
              {
                "type": "null"
              }
            ],
            "default": {
              "column": "",
              "model": "",
              "direction": ""
            }
          },
          "pagination": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Pagination"
              },
              {
                "type": "null"
              }
            ],
            "default": {
              "page": 1,
              "per_page": 20
            }
          },
          "columns": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Column"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Columns",
            "default": [
              {
                "column": "",
                "label": "",
                "model": ""
              }
            ]
          }
        },
        "type": "object",
        "title": "FilterRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LoginPayload": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "LoginPayload"
      },
      "LoginResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "firstname": {
            "type": "string",
            "title": "Firstname"
          },
          "lastname": {
            "type": "string",
            "title": "Lastname"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "role_id": {
            "type": "integer",
            "title": "Role Id"
          },
          "country_id": {
            "type": "integer",
            "title": "Country Id"
          },
          "access_token": {
            "type": "string",
            "title": "Access Token"
          }
        },
        "type": "object",
        "required": [
          "id",
          "firstname",
          "lastname",
          "username",
          "email",
          "role_id",
          "country_id",
          "access_token"
        ],
        "title": "LoginResponse"
      },
      "Operator": {
        "type": "string",
        "enum": [
          "=",
          "!=",
          "<",
          "<=",
          ">",
          ">=",
          "like",
          "in",
          "between"
        ],
        "title": "Operator"
      },
      "Pagination": {
        "properties": {
          "page": {
            "type": "integer",
            "title": "Page",
            "default": 1
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "default": 20
          }
        },
        "type": "object",
        "title": "Pagination"
      },
      "RegisterPayload": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "role_id": {
            "type": "integer",
            "title": "Role Id"
          },
          "country_id": {
            "type": "integer",
            "title": "Country Id"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password",
          "role_id",
          "country_id"
        ],
        "title": "RegisterPayload"
      },
      "RegisterResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "firstname": {
            "type": "string",
            "title": "Firstname"
          },
          "lastname": {
            "type": "string",
            "title": "Lastname"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "role_id": {
            "type": "integer",
            "title": "Role Id"
          },
          "country_id": {
            "type": "integer",
            "title": "Country Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "firstname",
          "lastname",
          "username",
          "email",
          "role_id",
          "country_id"
        ],
        "title": "RegisterResponse"
      },
      "SortOption": {
        "properties": {
          "column": {
            "type": "string",
            "title": "Column"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "direction": {
            "type": "string",
            "title": "Direction",
            "default": "asc"
          }
        },
        "type": "object",
        "required": [
          "column",
          "model"
        ],
        "title": "SortOption"
      },
      "UpdateContinentPayload": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          },
          "population": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Population"
          }
        },
        "type": "object",
        "required": [
          "name",
          "code",
          "population"
        ],
        "title": "UpdateContinentPayload"
      },
      "UpdateCountryPayload": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "iso2": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iso2"
          },
          "iso3": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iso3"
          },
          "population": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Population"
          },
          "continent_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Continent Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "iso2",
          "iso3",
          "population",
          "continent_id"
        ],
        "title": "UpdateCountryPayload"
      },
      "UpdateEpidemicPayload": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Type"
          },
          "pathogen_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pathogen Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "transmission_mode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Transmission Mode"
          },
          "symptoms": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Symptoms"
          },
          "reproduction_rate": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reproduction Rate"
          }
        },
        "type": "object",
        "required": [
          "name",
          "start_date",
          "end_date",
          "type",
          "pathogen_name",
          "description",
          "transmission_mode",
          "symptoms",
          "reproduction_rate"
        ],
        "title": "UpdateEpidemicPayload"
      },
      "UpdateRolePayload": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "UpdateRolePayload"
      },
      "UpdateVaccinePayload": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "laboratory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Laboratory"
          },
          "technology": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Technology"
          },
          "dose": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dose"
          },
          "efficacy": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Efficacy"
          },
          "storage_temperature": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Storage Temperature"
          },
          "epidemic_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Epidemic Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "laboratory",
          "technology",
          "dose",
          "efficacy",
          "storage_temperature",
          "epidemic_id"
        ],
        "title": "UpdateVaccinePayload"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}