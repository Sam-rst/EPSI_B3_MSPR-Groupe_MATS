version: 2.1

orbs:
  python: circleci/python@2.0.3
  docker: circleci/docker@2.4.0

commands:
  build-and-lint:
    parameters:
      app_path:
        type: string
      req_file:
        type: string
      note_min_linter:
        type: integer
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r <<parameters.req_file>>
      - run:
          name: Run linter
          command: pylint <<parameters.app_path>>/ --fail-under=<<parameters.note_min_linter>>

  run-all-tests:
    parameters:
      app_path:
        type: string
      req_file:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r <<parameters.req_file>>
      - run:
          name: Run tests
          command: pytest <<parameters.app_path>>/src/tests || [[ $? == 5 ]]

  ssh-deploy:
    description: "SSH into VPS and redeploy selected services"
    parameters:
      country:
        type: string
      env:
        type: string
      services:
        type: string
    steps:
      - add_ssh_keys
      - run:
          name: Deploy on VPS
          command: |
            ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP "
              cd /srv/analyseit/<<parameters.country>>/<<parameters.env>>;
              docker compose pull <<parameters.services>>;
              docker compose up -d <<parameters.services>>;
            "

jobs:
  starter:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Starter job"
          command: echo "Starter - branch correctly filtered"

  builds-ok:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Build validated"
          command: echo "Build validated"

  tests-ok:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Tests validated"
          command: echo "Tests validated"

  deploy-ok:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Deploy successful"
          command: echo "Deploy successful"

  build-api:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/api
          req_file: apps/api/requirements.txt
          note_min_linter: 5

  build-etl:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/etl
          req_file: apps/etl/requirements.txt
          note_min_linter: 4

  build-seeder:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/seeder
          req_file: apps/seeder/requirements.txt
          note_min_linter: 6

  tests-api:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/api
          req_file: apps/api/requirements.tests.txt

  tests-etl:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/etl
          req_file: apps/etl/requirements.tests.txt

  tests-seeder:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/seeder
          req_file: apps/seeder/requirements.tests.txt

  build-all-services:
    docker:
      - image: cimg/python:3.11  #
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login to DockerHub
          command: |
            echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin
      - run:
          name: Build & Push All Services
          command: |
            TAG=${CIRCLE_BRANCH}
            docker build apps/api -t docker.io/$REGISTRY_USER/api:${TAG}
            docker push docker.io/$REGISTRY_USER/api:${TAG}
            docker build apps/etl -t docker.io/$REGISTRY_USER/etl:${TAG}
            docker push docker.io/$REGISTRY_USER/etl:${TAG}
            docker build apps/seeder -t docker.io/$REGISTRY_USER/seeder:${TAG}
            docker push docker.io/$REGISTRY_USER/seeder:${TAG}
            docker build apps/techapi -t docker.io/$REGISTRY_USER/techapi:${TAG}
            docker push docker.io/$REGISTRY_USER/techapi:${TAG}
            docker build apps/dataviz -t docker.io/$REGISTRY_USER/dataviz:${TAG}
            docker push docker.io/$REGISTRY_USER/dataviz:${TAG}


  deploy-us-dev:
    machine: true
    steps:
      - ssh-deploy:
          country: us
          env: dev
          services: "api etl seeder techapi dataviz"

  deploy-fr-dev:
    machine: true
    steps:
      - ssh-deploy:
          country: fr
          env: dev
          services: "api etl seeder dataviz"

  deploy-ch-dev:
    machine: true
    steps:
      - ssh-deploy:
          country: ch
          env: dev
          services: "api etl seeder"

workflows:
  version: 2

  feature:
    jobs:
      - starter:
          filters:
            branches:
              only: /^feature\/.*/
      - build-api:
          requires: [starter]
      - build-etl:
          requires: [starter]
      - build-seeder:
          requires: [starter]
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder
      - tests-api:
          requires: [builds-ok]
      - tests-etl:
          requires: [builds-ok]
      - tests-seeder:
          requires: [builds-ok]
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder

  bugfix:
    jobs:
      - starter:
          filters:
            branches:
              only: /^bugfix\/.*/
      - build-api:
          requires: [starter]
      - build-etl:
          requires: [starter]
      - build-seeder:
          requires: [starter]
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder
      - tests-api:
          requires: [builds-ok]
      - tests-etl:
          requires: [builds-ok]
      - tests-seeder:
          requires: [builds-ok]
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder

  hotfix:
    jobs:
      - starter:
          filters:
            branches:
              only: /^hotfix\/.*/
      - build-api:
          requires: [starter]
      - build-etl:
          requires: [starter]
      - build-seeder:
          requires: [starter]
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder
      - tests-api:
          requires: [builds-ok]
      - tests-etl:
          requires: [builds-ok]
      - tests-seeder:
          requires: [builds-ok]
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder

  develop:
    jobs:
      - starter:
          filters:
            branches:
              only: develop
      - build-api:
          requires: [starter]
      - build-etl:
          requires: [starter]
      - build-seeder:
          requires: [starter]
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder
      - tests-api:
          requires: [builds-ok]
      - tests-etl:
          requires: [builds-ok]
      - tests-seeder:
          requires: [builds-ok]
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder
      - build-all-services:
          requires: [tests-ok]
      - deploy-us-dev:
          requires: [build-all-services]
      - deploy-fr-dev:
          requires: [build-all-services]
      - deploy-ch-dev:
          requires: [build-all-services]
      - deploy-ok:
          requires:
            - deploy-us-dev
            - deploy-fr-dev
            - deploy-ch-dev
