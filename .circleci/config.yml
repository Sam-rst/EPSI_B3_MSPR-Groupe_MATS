version: 2.1

orbs:
  python: circleci/python@2.0.3

commands:
  build-and-lint:
    parameters:
      app_path:
        type: string
      req_file:
        type: string
      note_min_linter:
        type: integer
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r <<parameters.req_file>>
      - run:
          name: Run linter
          command: pylint <<parameters.app_path>>/ --fail-under=<<parameters.note_min_linter>>

  run-all-tests:
    parameters:
      app_path:
        type: string
      req_file:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r <<parameters.req_file>>
      - run:
          name: Run unit tests
          command: pytest <<parameters.app_path>>/src/tests/unit/
      - run:
          name: Run integration tests
          command: pytest <<parameters.app_path>>/src/tests/integration/
      - run:
          name: Run regression tests
          command: pytest <<parameters.app_path>>/src/tests/regression/
      - run:
          name: Run performance tests
          command: pytest <<parameters.app_path>>/src/tests/performance/
      - run:
          name: Run security tests
          command: pytest <<parameters.app_path>>/src/tests/security/
      - run:
          name: Run compatibility tests
          command: pytest <<parameters.app_path>>/src/tests/compatibility/
      - run:
          name: Run accessibility tests
          command: pytest <<parameters.app_path>>/src/tests/accessibility/


jobs:
  starter:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Starter job"
          command: echo "Starter - branch correctly filtered"

  build-api:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/api
          req_file: apps/api/requirements.txt
          note_min_linter: 5 # Note minimale pour le linter (0-10) : 0 = pas de linter, 10 = code parfait

  build-etl:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/etl
          req_file: apps/etl/requirements.txt
          note_min_linter: 4 # Note minimale pour le linter (0-10) : 0 = pas de linter, 10 = code parfait

  build-seeder:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/seeder
          req_file: apps/seeder/requirements.txt
          note_min_linter: 6 # Note minimale pour le linter (0-10) : 0 = pas de linter, 10 = code parfait

  tests-api:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/api/src
          req_file: apps/api/requirements.tests.txt

  tests-etl:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/etl/src
          req_file: apps/etl/requirements.tests.txt

  tests-seeder:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/seeder/src
          req_file: apps/seeder/requirements.tests.txt

  deploy:
    parameters:
      environment:
        type: string # Définition de l'environnement cible du déploiement (dev, integration, prod...)
    executor: python/default
    steps:
      - checkout # Récupération du code source
      - run:
          name: Prepare Deployment Environment
          command: echo "Preparing deployment for <<parameters.environment>>..."
      - run:
          name: Deploy Application
          command: echo "Deploying application to <<parameters.environment>> environment..."
      - run:
          name: Run Verification Tests
          command: echo "Running verification tests..."
      - run:
          name: Run Functional Validation Tests
          command: echo "Running functional validation tests..."
      - run:
          name: Run Load Tests
          command: echo "Running load tests..."
      - run:
          name: Final Deployment Step
          command: echo "Finalizing deployment to <<parameters.environment>>..."
      - run:
          name: Monitoring and Follow-up
          command: echo "Starting monitoring and follow-up process..."

workflows:
  version: 2

  undefined: # Pour les branches créees ne respectant pas le pattern Gitflow, on effectue exactement le même traitement que pour les branches feature
    jobs:
      - starter:
          filters:
            branches:
              ignore:
                - /^feature\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/
                - develop
                - test
                - main
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - tests-api:
          requires:
            - build-api
      - tests-etl:
          requires:
            - build-etl
      - tests-seeder:
          requires:
            - build-seeder

  feature: # Pas besoin de déploiement pour les branches feature
    jobs:
      - starter:
          filters:
            branches:
              only:
                - /^feature\/.*/ # Déclenchement du starter uniquement pour les branches feature
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - tests-api:
          requires:
            - build-api
      - tests-etl:
          requires:
            - build-etl
      - tests-seeder:
          requires:
            - build-seeder

  bugfix: # Pas besoin de déploiement pour les branches bugfix
    jobs:
      - starter:
          filters:
            branches:
              only:
                - /^bugfix\/.*/ # Déclenchement du build uniquement pour les branches bugfix
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - tests-api:
          requires:
            - build-api
      - tests-etl:
          requires:
            - build-etl
      - tests-seeder:
          requires:
            - build-seeder

  hotfix: # Pas besoin de déploiement pour les branches hotfix
    jobs:
      - starter:
          filters:
            branches:
              only:
                - /^hotfix\/.*/ # Déclenchement du build uniquement pour les branches hotfix
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - tests-api:
          requires:
            - build-api
      - tests-etl:
          requires:
            - build-etl
      - tests-seeder:
          requires:
            - build-seeder

  develop: # Besoin d'un déploiement sur vercel pour la branche develop
    jobs:
      - starter:
          filters:
            branches:
              only: develop # Déclenchement du build uniquement sur la branche develop
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - tests-api:
          requires:
            - build-api
      - tests-etl:
          requires:
            - build-etl
      - tests-seeder:
          requires:
            - build-seeder
      - deploy:
          name: deploy_dev
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Déploiement sur vercel après validation des tests
          environment: develop

  test: # Besoin d'un déploiement pour la branche test
    jobs:
      - starter:
          filters:
            branches:
              only: test # Déclenchement du build uniquement sur la branche test
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - tests-api:
          requires:
            - build-api
      - tests-etl:
          requires:
            - build-etl
      - tests-seeder:
          requires:
            - build-seeder
      - deploy:
          name: deploy_test
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Déploiement sur vercel après validation des tests
          environment: test

  production: # Besoin d'un déploiement pour la branche main
    jobs:
      - starter:
          filters:
            branches:
              only: main # Déclenchement du build uniquement sur la branche principale
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - tests-api:
          requires:
            - build-api
      - tests-etl:
          requires:
            - build-etl
      - tests-seeder:
          requires:
            - build-seeder
      - deploy:
          name: deploy_prod
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Déploiement sur vercel après validation des tests
          environment: production