version: 2.1

orbs:
  python: circleci/python@2.0.3
  docker: circleci/docker@2.4.0

commands:
  build-and-lint:
    parameters:
      app_path:
        type: string
      req_file:
        type: string
      note_min_linter:
        type: integer
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r <<parameters.req_file>>
      - run:
          name: Run linter
          command: pylint <<parameters.app_path>>/ --fail-under=<<parameters.note_min_linter>>

  run-all-tests:
    parameters:
      app_path:
        type: string
      req_file:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r <<parameters.req_file>>
      - run:
          name: Run unit tests
          command: pytest <<parameters.app_path>>/src/tests/unit/ || [[ $? == 5 ]]
      - run:
          name: Run integration tests
          command: pytest <<parameters.app_path>>/src/tests/integration/ || [[ $? == 5 ]]
      - run:
          name: Run regression tests
          command: pytest <<parameters.app_path>>/src/tests/regression/ || [[ $? == 5 ]]
      - run:
          name: Run performance tests
          command: pytest <<parameters.app_path>>/src/tests/performance/ || [[ $? == 5 ]]
      - run:
          name: Run security tests
          command: pytest <<parameters.app_path>>/src/tests/security/ || [[ $? == 5 ]]
      - run:
          name: Run compatibility tests
          command: pytest <<parameters.app_path>>/src/tests/compatibility/ || [[ $? == 5 ]]
      - run:
          name: Run accessibility tests
          command: pytest <<parameters.app_path>>/src/tests/accessibility/ || [[ $? == 5 ]]

  build-and-push-image:
    description: "Build & Push Docker Image"
    parameters:
      app_name:
        type: string
      context_dir:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login to DockerHub
          command: |
            echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin
      - run:
          name: Build & Push
          command: |
            TAG=${CIRCLE_BRANCH}
            docker build <<parameters.context_dir>> -t docker.io/$REGISTRY_USER/<<parameters.app_name>>:${TAG}
            docker push docker.io/$REGISTRY_USER/<<parameters.app_name>>:${TAG}

  ssh-deploy:
    description: "SSH into VPS and redeploy selected services"
    parameters:
      country:
        type: string
      env:
        type: string
      services:
        type: string
    steps:
      - add_ssh_keys
      - run:
          name: Deploy on VPS
          command: |
            ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP <<-'EOSSH'
              cd /srv/analyseit/<<parameters.country>>/<<parameters.env>>
              docker compose pull <<parameters.services>>
              docker compose up -d <<parameters.services>>
            EOSSH


jobs:
  # ===== Steps between multiple tasks ===== #
  starter:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Starter job"
          command: echo "Starter - branch correctly filtered"

  builds-ok:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Build validated"
          command: echo "Build validated - branch correctly filtered"

  tests-ok:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Tests validated"
          command: echo "Tests validated - branch correctly filtered"

  deploy-ok:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "Deploy successful"
          command: echo "Deploy successful - branch correctly filtered"



  # ===== Jobs for build and lint ===== #
  build-api:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/api
          req_file: apps/api/requirements.txt
          note_min_linter: 5 # Note minimale pour le linter (0-10) : 0 = pas de linter, 10 = code parfait

  build-etl:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/etl
          req_file: apps/etl/requirements.txt
          note_min_linter: 4 # Note minimale pour le linter (0-10) : 0 = pas de linter, 10 = code parfait

  build-seeder:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - build-and-lint:
          app_path: apps/seeder
          req_file: apps/seeder/requirements.txt
          note_min_linter: 6 # Note minimale pour le linter (0-10) : 0 = pas de linter, 10 = code parfait



  # ===== Jobs for tests ===== #
  tests-api:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/api
          req_file: apps/api/requirements.tests.txt

  tests-etl:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/etl
          req_file: apps/etl/requirements.tests.txt

  tests-seeder:
    executor:
      name: python/default
      tag: "3.11"
    steps:
      - run-all-tests:
          app_path: apps/seeder
          req_file: apps/seeder/requirements.tests.txt



  # ===== Jobs for building and pushing images to server ===== #
  build-all-services:
    docker:
      - image: cimg/python:3.11
    steps:
      - build-and-push-image:
          app_name: api
          context_dir: apps/api
      - build-and-push-image:
          app_name: etl
          context_dir: apps/etl
      - build-and-push-image:
          app_name: seeder
          context_dir: apps/seeder
      - build-and-push-image:
          app_name: techapi
          context_dir: apps/techapi
      - build-and-push-image:
          app_name: dataviz
          context_dir: apps/dataviz

  # ===== Jobs for deploying ===== #
  # ➡️ Deploy Jobs US
  deploy-us-dev:
    machine: true
    steps:
      - ssh-deploy:
          country: us
          env: dev
          services: "api etl seeder techapi dataviz"

  deploy-us-test:
    machine: true
    steps:
      - ssh-deploy:
          country: us
          env: test
          services: "api etl seeder techapi dataviz"

  deploy-us-prod:
    machine: true
    steps:
      - ssh-deploy:
          country: us
          env: prod
          services: "api etl seeder techapi dataviz"

# ➡️ Deploy Jobs FR
  deploy-fr-dev:
    machine: true
    steps:
      - ssh-deploy:
          country: fr
          env: dev
          services: "api etl seeder dataviz"

  deploy-fr-test:
    machine: true
    steps:
      - ssh-deploy:
          country: fr
          env: test
          services: "api etl seeder dataviz"

  deploy-fr-prod:
    machine: true
    steps:
      - ssh-deploy:
          country: fr
          env: prod
          services: "api etl seeder dataviz"

# ➡️ Deploy Jobs CH
  deploy-ch-dev:
    machine: true
    steps:
      - ssh-deploy:
          country: ch
          env: dev
          services: "api etl seeder"

  deploy-ch-test:
    machine: true
    steps:
      - ssh-deploy:
          country: ch
          env: test
          services: "api etl seeder"

  deploy-ch-prod:
    machine: true
    steps:
      - ssh-deploy:
          country: ch
          env: prod
          services: "api etl seeder"

workflows:
  version: 2

  undefined: # Pour les branches créees ne respectant pas le pattern Gitflow, on effectue exactement le même traitement que pour les branches feature
    jobs:
      - starter:
          filters:
            branches:
              ignore:
                - /^feature\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/
                - develop
                - test
                - main
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder # Validation des builds
      - tests-api:
          requires:
            - builds-ok
      - tests-etl:
          requires:
            - builds-ok
      - tests-seeder:
          requires:
            - builds-ok
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Validation des tests

  feature: # Pas besoin de déploiement pour les branches feature
    jobs:
      - starter:
          filters:
            branches:
              only:
                - /^feature\/.*/ # Déclenchement du starter uniquement pour les branches feature
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder # Validation des builds
      - tests-api:
          requires:
            - builds-ok
      - tests-etl:
          requires:
            - builds-ok
      - tests-seeder:
          requires:
            - builds-ok
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Validation des tests

  bugfix: # Pas besoin de déploiement pour les branches bugfix
    jobs:
      - starter:
          filters:
            branches:
              only:
                - /^bugfix\/.*/ # Déclenchement du build uniquement pour les branches bugfix
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder # Validation des builds
      - tests-api:
          requires:
            - builds-ok
      - tests-etl:
          requires:
            - builds-ok
      - tests-seeder:
          requires:
            - builds-ok
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Validation des tests

  hotfix: # Pas besoin de déploiement pour les branches hotfix
    jobs:
      - starter:
          filters:
            branches:
              only:
                - /^hotfix\/.*/ # Déclenchement du build uniquement pour les branches hotfix
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder # Validation des builds
      - tests-api:
          requires:
            - builds-ok
      - tests-etl:
          requires:
            - builds-ok
      - tests-seeder:
          requires:
            - builds-ok
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Validation des tests

  develop: # Besoin d'un déploiement sur notre serveur pour la branche develop
    jobs:
      - starter:
          filters:
            branches:
              only: develop # Déclenchement du build uniquement sur la branche develop
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder # Validation des builds
      - tests-api:
          requires:
            - builds-ok
      - tests-etl:
          requires:
            - builds-ok
      - tests-seeder:
          requires:
            - builds-ok
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Validation des tests
      - build-all-services:
          requires:
            - tests-ok # Construction des images Docker après validation des tests
      - deploy-us-dev:
          requires:
            - build-all-services # Déploiement sur le serveur US après construction des images
      - deploy-fr-dev:
          requires:
            - build-all-services # Déploiement sur le serveur FR après construction des images
      - deploy-ch-dev:
          requires:
            - build-all-services # Déploiement sur le serveur CH après construction des images
      - deploy-ok:
          requires:
            - deploy-us-dev
            - deploy-fr-dev
            - deploy-ch-dev # Validation du déploiement sur les serveurs US, FR et CH

  test: # Besoin d'un déploiement pour la branche test
    jobs:
      - starter:
          filters:
            branches:
              only: test # Déclenchement du build uniquement sur la branche test
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder # Validation des builds
      - tests-api:
          requires:
            - builds-ok
      - tests-etl:
          requires:
            - builds-ok
      - tests-seeder:
          requires:
            - builds-ok
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Validation des tests
      - build-all-services:
          requires:
            - tests-ok # Construction des images Docker après validation des tests
      - deploy-us-dev:
          requires:
            - build-all-services # Déploiement sur le serveur US après construction des images
      - deploy-fr-dev:
          requires:
            - build-all-services # Déploiement sur le serveur FR après construction des images
      - deploy-ch-dev:
          requires:
            - build-all-services # Déploiement sur le serveur CH après construction des images
      - deploy-ok:
          requires:
            - deploy-us-dev
            - deploy-fr-dev
            - deploy-ch-dev # Validation du déploiement sur les serveurs US, FR et CH

  production: # Besoin d'un déploiement pour la branche main 
    jobs:
      - starter:
          filters:
            branches:
              only: main # Déclenchement du build uniquement sur la branche principale
      - build-api:
          requires:
            - starter
      - build-etl:
          requires:
            - starter
      - build-seeder:
          requires:
            - starter
      - builds-ok:
          requires:
            - build-api
            - build-etl
            - build-seeder # Validation des builds
      - tests-api:
          requires:
            - builds-ok
      - tests-etl:
          requires:
            - builds-ok
      - tests-seeder:
          requires:
            - builds-ok
      - tests-ok:
          requires:
            - tests-api
            - tests-etl
            - tests-seeder # Validation des tests
      - build-all-services:
          requires:
            - tests-ok # Construction des images Docker après validation des tests
      - deploy-us-prod:
          requires:
            - build-all-services # Déploiement sur le serveur US après construction des images
      - deploy-fr-prod:
          requires:
            - build-all-services # Déploiement sur le serveur FR après construction des images
      - deploy-ch-prod:
          requires:
            - build-all-services # Déploiement sur le serveur CH après construction des images
      - deploy-ok:
          requires:
            - deploy-us-prod
            - deploy-fr-prod
            - deploy-ch-prod # Validation du déploiement sur les serveurs US, FR et CH